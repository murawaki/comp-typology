*About

  Yugo Murawaki. 2015. Continuous Space Representations of Linguistic
  Typology and their Application to Phylogenetic Inference.  In
  Proceedings of the 2015 Conference of the North American Chapter of
  the Association for Computational Linguistics: Human Language
  Technologies (NAACL-HLT 2015), pp. 324-334.


*Requirements

- Python2
  - numpy
- Perl (for preprocessing)
- R (for missing data imputation)
  - missMDA


*Data setup
  The main outputs are:
  - tree.json: Ethnologue tree
  - walstree.json: two-level WALS tree
  - features.json: WALS features (after thresholding)
  - langs.filled.json: set of languages for the PARTIAL data with missing data imputation
  - langs_all.filled.json: set of languages for the FULL data with missing data imputation


- Download language.csv from WALS http://wals.info/

- Manually modify language.csv to obtain language.modified.csv
  (added some glottocodes available online)

- Convert language.modified.csv to 2 json files
% python format_wals/csv2json.py ../data/wals/language.modified.csv ../data/wals/langs_all.json ../data/wals/flist_all.json

- Fill logically determined items
  % python format_wals/logical.py ../data/wals/langs_all.json ../data/wals/flist_all.json ../data/wals/langs_aug.json ../data/wals/flist_aug.json

- Remove features with fill filled languages
  % python format_wals/fthres.py --fthres=0.1 ../data/wals/langs_aug.json ../data/wals/flist_aug.json ../data/wals/langs_full.json ../data/wals/flist.json

- Remove languages with few filled features
  % python format_wals/lthres.py --lthres=0.3 ../data/wals/langs_full.json ../data/wals/flist.json ../data/wals/langs.json






<DEL>
  % cd scripts
  % perl format_wals/langlist.pl < ../data/language.modified.csv > ../data/langlist.out 2> ../data/langlist.err


TODO: SWITCH TO Glottolog.

- Download Ethnologue pages using WALS's ISO codes

  % cd data/ethnologue
  % perl -anle '{if (! -f $F[0]){ printf "http://www.ethnologue.com/language/%s\n", $F[0]; }}' < ../langlist.out | wget -i - -w 60

- Extract classifications from Ethnologue pages

  % for f in ???; do echo -e "$f\t"`cat $f | perl -nle'if(/<div class=\"field-label\">Classification<\/div>/){$flag=1;}if($flag and /\">([^<]+)<\/a>/) { print $1; exit }'`; done > ../classifications


- Create JSON files
  - Notes:
    - Language isolates are put directly under ROOT
    - Intermediate nodes that have only one child are removed
    - If multiple languages share the same ISO code, they are put under an intermediate node
    - Languages labeled as "Deaf sign language", "Mixed language" or others are removed

  % cd scripts
  % perl format_wals/format.pl ../data/langlist.out ../data/language.modified.csv ../data/classifications ../data/tree.json ../data/features_all.json ../data/walstree.json
</DEL>




*Missing data imputation

- For the PARTIAL dataset:

  % python mv/json2tsv.py ../data/wals/langs.json ../data/wals/flist.json ../data/wals/langs.tsv
  % R --vanilla -f mv/impute_mca.r --args ../data/wals/langs.tsv ../data/wals/langs.filled.tsv
  % python mv/tsv2json.py ../data/wals/langs.json ../data/wals/langs.filled.tsv ../data/wals/flist.json ../data/wals/langs.filled.json

- For the FULL dataset:

  % python mv/json2tsv.py ../data/wals/langs_full.json ../data/wals/flist.json ../data/wals/langs_full.tsv
  % R --vanilla -f mv/impute_mca.r --args ../data/wals/langs_full.tsv ../data/wals/langs_full.filled.tsv
  % python mv/tsv2json.py ../data/wals/langs_full.json ../data/wals/langs_full.filled.tsv ../data/wals/flist.json ../data/wals/langs_full.filled.json


**Evaluating missing data imputation by cross-validation

  % make -j 8 -f mv/cv/autoeval.make all CV=10
